@page "/workdetails/{projectName}"
@inject NavigationManager Navigation
@using Google.Cloud.Firestore
@inject IJSRuntime JS

<head>
    <style>
        body {
            background-image: url('IMG_bluey.JPG');
        }
    </style>
</head>

<h6 style="font-size:300%; font-family:'Trebuchet MS'; background-color:powderblue;"> Work Details for @projectName </h6>


<!-- Form to Input Work Details -->
<div class="form-group">
    <label for="taskName">Task Name</label>
    <input type="text" id="taskName" @bind="newTaskName" class="form-control" />
</div>

<div class="form-group">
    <label for="progress">Progress</label>
    <select id="progress" @bind="newProgress" class="form-control">
        <option value="To Do">To Do</option>
        <option value="In Progress">In Progress</option>
        <option value="Completed">Completed</option>
    </select>
</div>

<div class="form-group">
    <label for="assignedTo">Assigned To</label>
    <input type="text" id="assignedTo" @bind="newAssignedTo" class="form-control" />
</div>

<button class="btn btn-primary" @onclick="SaveWorkDetails">Save Work Details</button>

<hr />

<!-- Work Details List -->
<h5 style="font-size:200%; font-family:'Comic Sans MS', cursive; background-color:powderblue;"> Work Details for @projectName </h5>
@if (workDetails.Any())
{
    @foreach (var work in workDetails)
    {
        <div class="work-item">
            <p>
                <b>Task Name:</b> @work.TaskName <br />
                <b>Progress:</b> @work.Progress <br />
                <b>Assigned To:</b> @work.AssignedTo <br />
                <b>Project Name:</b> @work.ProjectName <br /> <!-- Display Project Name -->
            </p>
            <hr />
        </div>
    }
}
else
{
    <p>No work details available for this project.</p>
}

@code {
    [Parameter] public string projectName { get; set; }

    FirestoreDb db = FirestoreDb.Create("oop-website-9ba5d");

    public class WorkDetails
    {
        public string TaskName { get; set; }
        public string Progress { get; set; }
        public string AssignedTo { get; set; }
        public string ProjectName { get; set; }
    }

    private List<WorkDetails> workDetails = new();
    private string newTaskName = "";
    private string newProgress = "To Do";
    private string newAssignedTo = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadWorkDetails();
    }

    // Save the Work Details to Firestore
    private async Task SaveWorkDetails()
    {
        if (string.IsNullOrWhiteSpace(newTaskName) || string.IsNullOrWhiteSpace(newAssignedTo))
        {
            Console.WriteLine("Invalid input data.");
            return;
        }

        // Create a dictionary for Firestore data
        var newWorkDetails = new Dictionary<string, object>
        {
            { "TaskName", newTaskName },
            { "Progress", newProgress },
            { "AssignedTo", newAssignedTo },
            { "ProjectName", projectName }  // Link to the project
        };

        try
        {
            Console.WriteLine("Saving work details...");
            // Save to Firestore "workdetails" collection under project name
            DocumentReference docRef = db.Collection("workdetails").Document(projectName).Collection("tasks").Document(); // Collection under the project name
            await docRef.SetAsync(newWorkDetails); // Pass the dictionary instead of the WorkDetails object
            ResetForm();
            await LoadWorkDetails(); // Reload the list after saving
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding work details: {ex.Message}");
        }
    }

    // Load Work Details from Firestore for the current project
    private async Task LoadWorkDetails()
    {
        try
        {
            var collection = db.Collection("workdetails").Document(projectName).Collection("tasks");
            QuerySnapshot snapshot = await collection.GetSnapshotAsync();

            var workDetailsList = new List<WorkDetails>();
            foreach (var doc in snapshot.Documents)
            {
                workDetailsList.Add(new WorkDetails
                    {
                        TaskName = doc.GetValue<string>("TaskName"),
                        Progress = doc.GetValue<string>("Progress"),
                        AssignedTo = doc.GetValue<string>("AssignedTo"),
                        ProjectName = doc.GetValue<string>("ProjectName")
                    });
            }
            workDetails = workDetailsList;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading work details: {ex.Message}");
        }
    }

    // Reset the form inputs after saving
    private void ResetForm()
    {
        newTaskName = "";
        newProgress = "To Do";
        newAssignedTo = "";
    }
}

